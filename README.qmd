---
title: "Custom bash scripts for various tasks"
format: gfm
execute:
  eval: false
---

# Overview

You can clone this repository, selectively make commands available on your system, and then later keeping up to date with this repository:

```{bash}
# change to desired directory in shell where you want to clone
git clone https://github.com/philipp-baumann/vector-and-image-cli-commands.git
# pull newest updates if there were changes
git pull
```

To produce a rendered `README.md` with code evaluated based on `README.qmd`, quarto is used. To get your python environment ready:

```{bash}
#| eval: true
# activate local environment
source env/bin/activate
# restore state
python3 -m pip install -r requirements.txt
```

Then, make quarto CLI ready to render README contents.

```{bash}
chmod +x ./scripts/gh_install_quarto_prerelease.sh
# copy it to make it available on any folder in your shell
sudo cp  ./scripts/gh_install_quarto_prerelease.sh /usr/local/bin/
```

Finally, render if you want to update and repeat the write-publish cycle as you wish:

```{bash}
quarto render README.qmd
# produces README.md
```


# Get latest GitHub release number of a repository

```{bash}
# make the file executable
chmod +x ./scripts/gh_get_latest_release.sh
# copy it to make it available on any folder in your shell
sudo cp  ./scripts/gh_get_latest_release.sh /usr/local/bin/gh_get_latest_release
```

For pre-releases, prepare the script.

```{bash}
# make the file executable
chmod +x ./scripts/gh_install_quarto_prerelease.sh
# copy it to make it available on any folder in your shell
sudo cp  ./scripts/gh_install_quarto_prerelease.sh /usr/local/bin/
```

Then just do.

```{bash}
gh_install_quarto_prerelease
```

To use virtualenv, activate it

```{bash}
https://quarto.org/docs/projects/virtual-environments.html
python3 -m venv env
## python3 -m pip install jupyter
## freeze the environment
## python3 -m pip freeze > requirements.txt
# install python packages from environments
python3 -m pip install -r requirements.txt
```

# Get quarto CLI as publishing system

There is a custom script here for the latest pre-release

```{bash}
# make the file executable
chmod +x ./scripts/gh_get_latest_prerelease.sh
# copy it to make it available on any folder in your shell
sudo cp  ./scripts/gh_get_latest_prerelease.sh /usr/local/bin/gh_get_latest_prerelease
```

# Transformation of vector formats

## Custom ghostscript (gs) routines

More infos about ghostscript can be found on the [official page](https://www.ghostscript.com/).

### Resize PDFs

- [`resize_pdf`](scripts/resize_pdf.sh) is a simple shell script that performs resizing from an input format (e.g., A4) to a desired output format (e.g., A5).

To make it available on your Linux/MacOS device, you might first
have to install the ghostscript (gs) command line program.

```{bash}
# check if it is installed
gs --version
# e.g. on Ubuntu/Debian
sudo apt install ghostscript
# for other platforms, follow https://ghostscript.com/docs/9.54.0/Install.htm
```


```{bash}
# make the file executable
chmod +x ./scripts/resize_pdf.sh
# copy it to make it available on any folder in your shell
sudo cp  ./scripts/resize_pdf.sh /usr/local/bin/resize_pdf
```

The syntax of the script is:

```{bash}
# change to folder with desired pdfwrite
# it has the following command syntax
resize_pdf <your-file.pdf> <format-tag-from> <format-tag-to>
# e.g.
resize_pdf example.pdf a4 a5
```

## Reduce the file of a PDF

```{bash}
# make the file executable
chmod +x ./scripts/reducesize_pdf.sh
# copy it to make it available on any folder in your shell
sudo cp  ./scripts/reducesize_pdf.sh /usr/local/bin/reducesize_pdf
```

# PDFtk routines

## Combine multiple files

First install it.

```{bash}
# e.g. on ubuntu
sudo apt install pdftk
```

Merge multiple PDF files into one.

```{bash}
pdftk file1.pdf file2.pdf file3.pdf cat output newfile.pdf
# in a directory
pdftk *.pdf cat output newfile.pdf
```
